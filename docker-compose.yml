version: '3.8'

services:
  # Backend service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=development
      - PORT=4000
      - LOG_LEVEL=debug
      - LOGS_DIR=/app/logs
      - D1_PATH=/app/data/db.sqlite
      - R2_ROOT=/app/data/r2
    volumes:
      - ./src:/app/src:ro
      - ./tmp:/app/tmp
      - ./drizzle:/app/drizzle:ro
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./wrangler.toml:/app/wrangler.toml:ro
    working_dir: /app
    command: npm run serve
    depends_on:
      - database
    networks:
      - ccsb-network

  # Frontend service (if we add one later)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:4000
      - VITE_WS_URL=ws://localhost:4000
    volumes:
      - ./src:/app/src:ro
      - ./public:/app/public:ro
      - ./package.json:/app/package.json:ro
      - ./package-lock.json:/app/package-lock.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./vite.config.ts:/app/vite.config.ts:ro
    working_dir: /app
    command: npm run dev
    networks:
      - ccsb-network

  # Database service for local development
  database:
    image: sqlite:latest
    volumes:
      - ./tmp:/data
      - ./drizzle:/drizzle:ro
    working_dir: /data
    command: >
      sh -c "
        echo 'Initializing SQLite database...' &&
        sqlite3 db.sqlite < /drizzle/0000_tan_multiple_man.sql &&
        echo 'Database initialized successfully' &&
        tail -f /dev/null
      "
    networks:
      - ccsb-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ccsb-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - ccsb-network

volumes:
  redis_data:

networks:
  ccsb-network:
    driver: bridge


